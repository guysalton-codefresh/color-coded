version: '1.0'
stages:
 - Build
 - Deploy
steps:
  main_clone:
    title: Cloning main repository...
    type: git-clone
    stage: Build
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: github-guy
  BuildingDockerImage:
    title: Building Docker Image
    type: build
    stage: Build
    image_name: todaywasawesome/colorcoded
    working_directory: ./
    tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    dockerfile: Dockerfile
  # AquaSecurityScan:
  #   image: codefresh/cfstep-aqua
  #   environment:
  #     - AQUA_HOST=http://35.193.8.17
  #     - AQUA_PASSWORD=${{AQUA_PASS}}
  #     - AQUA_USERNAME=administrator
  #     - IMAGE=todaywasawesome/colorcoded
  #     - TAG=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
  IstioInfo:
    title: Gather Production State
    stage: Deploy
    image: containers101/k8sclitoolset
    commands:
    - kubectl config get-contexts
    - kubectl config use-context ${{KUBE_CONTEXT}}
    - istioctl get virtualservices
    - cf_export prodVersion=$(kubectl get service -l status=prod -n ${{NAMESPACE}} -o=jsonpath='{$.items[0].metadata.name}')
    - cf_export prodImage=$(kubectl get service -l status=prod -n ${{NAMESPACE}} -o=jsonpath='{$.items[0].metadata.labels.version}')
    - cf_export canaryVersion=${{RELEASE}}-${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    - cf_export canaryImage=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
  DeployHelm:
    title: Prod with Canary Helm Release
    image: containers101/k8sclitoolset
    stage: Deploy
    commands:
    - echo "Prod is ${{prodVersion}} and Canary is ${{canaryVersion}}"
#    - if [ "${{prodVersion}}" = "${{canaryVersion}}" ]; then echo "Prod version is the same as canary, nothing to do. Exiting"; exit 1; fi
    - helm upgrade --install ${{RELEASE}} deploy/helm/colors --namespace=${{NAMESPACE}} --debug --set deployment[0].track=release --set deployment[0].image.repository=r.cfcr.io/codefreshdemo/todaywasawesome/colorcoded --set deployment[0].image.tag="${{prodImage}}" --set deployment[0].image.version="${{prodImage}}" --set deployment[0].image.pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{NAMESPACE}} --set deployment[1].track=canary --set deployment[1].image.repository=r.cfcr.io/codefreshdemo/todaywasawesome/colorcoded --set deployment[1].image.tag='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}' --set deployment[1].image.version="${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}" --set deployment[1].image.pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{NAMESPACE}}
  StartCanary:
    title: Canary Rollout
    image: containers101/k8sclitoolset
    stage: Deploy
    commands:
      - kubectl config use-context ${{KUBE_CONTEXT}}
      - bash -e istio/rollout.sh ${{CF_VOLUME_PATH}}/ ${{prodVersion}} ${{canaryVersion}} 35 ${{CF_KUBECONFIG_PATH}} ${{NAMESPACE}}
  ReleaseProd:
    title: Do Final Helm Release
    image: containers101/k8sclitoolset
    stage: Deploy
    commands:
    - kubectl config use-context ${{KUBE_CONTEXT}}
    - echo "New Prod is ${{canaryVersion}}, doing final Helm release"
    - helm upgrade --install ${{RELEASE}} deploy/helm/colors --namespace=${{NAMESPACE}} --debug --set deployment[0].track=canary --set deployment[0].image.repository=r.cfcr.io/codefreshdemo/todaywasawesome/colorcoded --set deployment[0].image.tag='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}' --set deployment[0].image.version="${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}" --set deployment[0].image.pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{NAMESPACE}}
    - echo "Marking new release as prod"
    - kubectl label svc ${{canaryVersion}} status=prod -n ${{NAMESPACE}}
